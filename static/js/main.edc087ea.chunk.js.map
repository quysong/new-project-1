{"version":3,"sources":["logo.svg","Components/Pages/Home/index.js","Components/Pages/About/index.js","Components/Pages/NotFound/index.js","Components/Pages/Blog/index.js","Components/Pages/BlogDetail/index.js","Components/Pages/ErrorBoundary/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Home","title","content","About","props","NotFound","Blog","useState","count","onClick","Error","BlogDetail","useParams","id","query","URLSearchParams","useLocation","search","console","log","get","abc","ErrorBoundary","state","hasError","error","errorInfo","this","children","React","Component","App","to","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iKAAAA,EAAOC,QAAU,IAA0B,kC,iGCmB5BC,G,kBAhBF,SAAC,GAGP,IAFHC,EAEE,EAFFA,MACAC,EACE,EADFA,QAEA,OACI,qCACUD,EAAM,6BACXC,K,cCKEC,EAZD,SAAAC,GACV,OACI,4CCUOC,EAZE,SAAAD,GACb,OACI,0C,QCkBOE,EApBF,SAAAF,GAAU,IAAD,EACQG,oBAAS,GADjB,mBACXC,EADW,UAOlB,OACI,uCACYA,EAAM,6BACd,6BACA,4BAAQC,QAAS,WAAO,MAAM,IAAIC,MAAM,kBAAxC,OCUGC,EAhBI,SAAAP,GACNQ,cAAYC,GAArB,IAEMC,EALC,IAAIC,gBAAgBC,cAAcC,QAWzC,OALEC,QAAQC,IAAI,mBAAoBL,EAAMM,IAAI,QAC5CF,QAAQC,IAAI,kBAAmBH,eAC/BE,QAAQC,IAAI,eAAgBP,eAC5BM,QAAQC,IAAI,eAAgBP,cAAYC,IACxCK,QAAQC,IAAI,eAAgBP,cAAYS,KAEpC,8C,wCCWOC,E,YA1Bb,WAAYlB,GAAQ,IAAD,8BACjB,4CAAMA,KACDmB,MAAQ,CAAEC,UAAU,GAFR,E,+EAUDC,EAAOC,GAEvBR,QAAQC,IAAI,QAASM,GACrBP,QAAQC,IAAI,YAAaO,K,+BAIzB,OAAIC,KAAKJ,MAAMC,SAEN,qDAGFG,KAAKvB,MAAMwB,Y,gDAjBYH,GAE9B,MAAO,CAAED,UAAU,O,GARKK,IAAMC,WC2EnBC,MA7Df,WAYE,OACE,oCACA,kBAAC,IAAD,KACE,6BACE,6BACE,4BACE,4BACE,kBAAC,IAAD,CAAMC,GAAG,KAAT,SAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,UAAT,UAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,SAAT,WAON,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KAChB,kBAAC,EAAD,KACE,kBAAC,EAAD,QAGJ,kBAAC,IAAD,CAAOA,KAAK,UACV,kBAAC,EAAD,KACE,kBAAC,EAAD,QAGJ,kBAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,SAChB,kBAAC,EAAD,KACE,kBAAC,EAAD,QAGJ,kBAAC,IAAD,CAAOA,KAAK,aACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,EAAD,YCxDQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.edc087ea.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Home = ({\n    title,\n    content,\n}) => {\n    return (\n        <div>\n            Home {title}<hr></hr>\n            {content}\n        </div>\n    );\n};\n\nHome.propTypes = {\n    \n};\n\nexport default Home;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst About = props => {\n    return (\n        <div>\n            About page\n        </div>\n    );\n};\n\nAbout.propTypes = {\n    \n};\n\nexport default About;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst NotFound = props => {\n    return (\n        <div>\n            page 404\n        </div>\n    );\n};\n\nNotFound.propTypes = {\n    \n};\n\nexport default NotFound;","import React, { useEffect, useState, useDebugValue } from 'react';\nimport PropTypes from 'prop-types';\n\nconst Blog = props => {\n    const [count, setCount] = useState(false)\n\n    const funcA = () => {\n        throw new Error('my error')\n    }\n\n    return (\n        <div>\n            Count: {count}<br></br>\n            <br></br>\n            <button onClick={() => {throw new Error('Error thrown')}}>+</button>\n        </div>\n    );\n};\n\nBlog.propTypes = {\n\n};\n\nexport default Blog;","import React from 'react';\nimport {\n    useParams,\n    useLocation,\n  } from \"react-router-dom\";\n  const useQuery=()=> {\n    return new URLSearchParams(useLocation().search);\n  }\nconst BlogDetail = props => {\n    let id = useParams().id\n    \n      let query = useQuery();\n      console.log('useQuery.get() :', query.get('age'));\n    console.log('useLocation() :', useLocation());\n    console.log('useParams 1:', useParams());\n    console.log('useParams 2:', useParams().id);\n    console.log('useParams 3:', useParams().abc);\n    return (\n        <div>\n            Blog Detail:\n        </div>\n    );\n};\n\nexport default BlogDetail;","import React, { Component } from 'react'\n\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error) {\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    // You can also log the error to an error reporting service\n    console.log('error', error)\n    console.log('errorInfo', errorInfo)\n  }\n\n  render() {\n    if (this.state.hasError) {\n      // You can render any custom fallback UI\n      return <h1>Something went wrong.</h1>;\n    }\n\n    return this.props.children; \n  }\n}\n\nexport default ErrorBoundary","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Home from './Components/Pages/Home';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n} from \"react-router-dom\";\nimport About from './Components/Pages/About';\nimport NotFound from './Components/Pages/NotFound';\nimport Blog from './Components/Pages/Blog';\nimport BlogDetail from './Components/Pages/BlogDetail';\nimport ErrorBoundary from './Components/Pages/ErrorBoundary';\n\nfunction App() {\n  const obj = {\n    a:1,\n    b:2,\n  }\n  const func1 = (params1, params2) => {\n    console.log('object params1 :', params1);\n    console.log('object params2 :', params2);\n  }\n  const func2 = (abc) =>{\n    console.log('abc :', abc);\n  }\n  return (\n    <>\n    <Router>\n      <div>\n        <nav>\n          <ul>\n            <li>\n              <Link to=\"/\">Home</Link>\n            </li>\n            <li>\n              <Link to=\"/about\">About</Link>\n            </li>\n            <li>\n              <Link to=\"/blog\">Blog</Link>\n            </li>\n          </ul>\n        </nav>\n\n        {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n        <Switch>\n          <Route exact path=\"/\">\n            <ErrorBoundary>\n              <Home />\n            </ErrorBoundary>\n          </Route>\n          <Route path=\"/about\">\n            <ErrorBoundary>\n              <About/>\n            </ErrorBoundary>\n          </Route>\n          <Route exact path=\"/blog\">\n            <ErrorBoundary>\n              <Blog/>\n            </ErrorBoundary>\n          </Route>\n          <Route path=\"/blog/:id\">\n            <BlogDetail/>\n          </Route>\n          <Route path=\"*\">\n            <NotFound></NotFound>\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}